require File.dirname(__FILE__) + '/test_helper'

class CallTest < Test::Unit::TestCase
  def setup
    I18n::Keys.verbose = false
  end
  
  def setup
    I18n::Keys.verbose = false
    @filename = "#{File.dirname(__FILE__)}/fixtures/source_1.rb"
    FileUtils.cp(@filename, "#{@filename}.backup")
  end

  def teardown
    FileUtils.mv("#{@filename}.backup", @filename)
  end

  def call(key = :bar)
    index = I18n::Keys::Index.new
    index.update
    index.by_key[key.to_sym].first
  end
  
  def test_scope_from_sexp
    I18n::Keys::Index.new.build
    # I18n::Keys::Call.scope_from_sexp(sexp)
  end
  
  def test_line_without_highlighting
    assert_equal "    t(:'baar', :scope => ['foo', :fooo], :default => 'bla')\n", call(:baar).key.line
  end
  
  def test_line_with_highlighting
    assert_equal "    t(\e[0;31;1m:'baar'\e[0m, :scope => ['foo', :fooo], :default => 'bla')\n", call(:baar).key.line(true)
  end
  
  def test_call_line_num
    assert_equal 3, call.key.line_num
  end
  
  def test_call_column
    assert_equal 7, call.key.column
  end
  
  def test_call_length
    assert_equal 4, call.key.length
  end
  
  def test_code
    assert ":bar", call.key.code
  end
  
  def test_content_head
    assert_equal "def foo\n    t(", call.key.content_head[-14, 999]
  end
  
  def test_content_tail
    assert_equal ")\n    t(:\"baaar\")\n", call.key.content_tail[0, 18]
  end
  
  def test_line_head
    assert_equal "    t(", call.key.line_head
  end
  
  def test_line_tail
    assert_equal ")\n", call.key.line_tail
  end
  
  def test_context_returns_the_context_of_the_call_with_2_lines_setting
    context = call(:baar).key.context.split("\n")
    assert_equal 5, context.length
    assert_equal "    t(\e[0;31;1m:'baar'\e[0m, :scope => ['foo', :fooo], :default => 'bla')", context[2]
  end
  
  def test_context_returns_the_context_of_the_call_with_3_lines_setting
    I18n::Keys::Call.context_lines = 3
    context = call(:baar).key.context.split("\n")
    assert_equal 7, context.length
    assert_equal "    t(\e[0;31;1m:'baar'\e[0m, :scope => ['foo', :fooo], :default => 'bla')", context[3]
  end
  
  def test_replace_simple_symbol_with_simple_symbol
    bar = call(:bar)
    bar.replace!(:oooooooo)
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_simple_symbol_with_quoted_symbol
    bar = call(:bar)
    bar.replace!(:'oooo.oooo')
    assert_equal "    t(\e[0;31;1m:\"oooo.oooo\"\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_simple_symbol_with_string
    bar = call(:bar)
    bar.replace!('oooooooo')
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_quoted_symbol_with_simple_symbol
    bar = call(:'foo.bar')
    bar.replace!(:oooooooo)
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_quoted_symbol_with_quoted_symbol
    bar = call(:'foo.bar')
    bar.replace!(:'oooo.oooo')
    assert_equal "    t(\e[0;31;1m:\"oooo.oooo\"\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_quoted_symbol_with_string
    bar = call(:'foo.bar')
    bar.replace!('oooooooo')
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_string_with_simple_symbol
    bar = call('bar_1')
    bar.replace!(:oooooooo)
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_string_with_quoted_symbol
    bar = call('bar_1')
    bar.replace!(:'oooo.oooo')
    assert_equal "    t(\e[0;31;1m:\"oooo.oooo\"\e[0m)\n", bar.key.line(true)
  end
  
  def test_replace_string_with_string
    bar = call('bar_1')
    bar.replace!('oooooooo')
    assert_equal "    t(\e[0;31;1m:oooooooo\e[0m)\n", bar.key.line(true)
  end
end